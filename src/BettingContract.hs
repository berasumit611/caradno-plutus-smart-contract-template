-- {-# LANGUAGE DataKinds           #-}
-- {-# LANGUAGE NoImplicitPrelude   #-}
-- {-# LANGUAGE TemplateHaskell     #-}
-- {-# LANGUAGE ScopedTypeVariables #-}
-- {-# LANGUAGE OverloadedStrings   #-}
-- {-# LANGUAGE DeriveAnyClass      #-}
-- {-# LANGUAGE DeriveGeneric       #-}
-- {-# LANGUAGE MultiParamTypeClasses #-}
-- {-# LANGUAGE TypeFamilies        #-}

-- module BettingContract where

-- import           Plutus.V2.Ledger.Api      (BuiltinData, Validator, mkValidatorScript, PubKeyHash)
-- import           Plutus.V2.Ledger.Contexts (ScriptContext, TxInfo, txInfoSignatories)
-- import           PlutusTx                  (compile, liftCode, applyCode)
-- import           PlutusTx.Prelude          hiding (Semigroup(..), unless)
-- import           Prelude                   (Show, String)

-- -- Define the betting parameters
-- data BetParams = BetParams
--   { bettor1   :: PubKeyHash  -- Public key hash of bettor 1
--   , bettor2   :: PubKeyHash  -- Public key hash of bettor 2
--   , condition :: BuiltinByteString -- The bet condition to validate
--   }
--   deriving Show

-- -- PlutusTx.unstableMakeIsData ''BetParams

-- -- Validate the bet outcome
-- {-# INLINABLE validateBet #-}
-- validateBet :: BetParams -> BuiltinByteString -> ScriptContext -> Bool
-- validateBet params outcome ctx =
--   let
--     info :: TxInfo
--     info = scriptContextTxInfo ctx

--     -- Check if the outcome matches the condition
--     outcomeMatches :: Bool
--     outcomeMatches = outcome == condition params

--     -- Verify if either bettor signed the transaction
--     signedByBettor1 :: Bool
--     signedByBettor1 = bettor1 params `elem` txInfoSignatories info

--     signedByBettor2 :: Bool
--     signedByBettor2 = bettor2 params `elem` txInfoSignatories info

--   in
--     outcomeMatches && (signedByBettor1 || signedByBettor2)

-- -- Compile the validator
-- {-# INLINABLE mkBettingValidator #-}
-- mkBettingValidator :: BetParams -> BuiltinByteString -> ScriptContext -> Bool
-- mkBettingValidator = validateBet

-- -- Boilerplate code to compile the validator
-- validator :: Validator
-- validator = mkValidatorScript $$(PlutusTx.compile [|| wrap ||])
--   where
--     wrap = mkBettingValidator


{-# LANGUAGE DataKinds           #-}
{-# LANGUAGE NoImplicitPrelude   #-}
{-# LANGUAGE TemplateHaskell     #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE OverloadedStrings   #-}
{-# LANGUAGE DeriveAnyClass      #-}
{-# LANGUAGE DeriveGeneric       #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies        #-}
{-# LANGUAGE TypeApplications #-}

module BettingContract where

import           Plutus.V2.Ledger.Api      (BuiltinData, Validator, mkValidatorScript, PubKeyHash, unsafeFromBuiltinData)
import           Plutus.V2.Ledger.Contexts (ScriptContext, TxInfo, txInfoSignatories, scriptContextTxInfo)
import           PlutusTx                  (compile, unstableMakeIsData)
import           PlutusTx.Prelude          hiding (Semigroup(..), unless)
import           Prelude                   (Show, String, IO, FilePath, writeFile, print, putStrLn)
import qualified Data.ByteString.Lazy as LBS
import qualified Data.ByteString.Short as SBS
import           Cardano.Api.Shelley (PlutusScript (..), writeFileTextEnvelope, displayError, PlutusScriptV2)
import qualified Plutus.V2.Ledger.Api
import           System.Directory (createDirectoryIfMissing)
import           System.FilePath (takeDirectory)
import           Cardano.Api
import           Codec.Serialise (serialise)

-- Define the betting parameters
data BetParams = BetParams
  { bettor1   :: PubKeyHash  -- Public key hash of bettor 1
  , bettor2   :: PubKeyHash  -- Public key hash of bettor 2
  , condition :: BuiltinByteString -- The bet condition to validate
  }
  deriving Show

-- Derive the necessary instances
PlutusTx.unstableMakeIsData ''BetParams

-- Validate the bet outcome
{-# INLINABLE validateBet #-}
validateBet :: BetParams -> BuiltinByteString -> ScriptContext -> Bool
validateBet params outcome ctx =
  let
    info :: TxInfo
    info = scriptContextTxInfo ctx

    -- Check if the outcome matches the condition
    outcomeMatches :: Bool
    outcomeMatches = outcome == condition params

    -- Verify if either bettor signed the transaction
    signedByBettor1 :: Bool
    signedByBettor1 = bettor1 params `elem` txInfoSignatories info

    signedByBettor2 :: Bool
    signedByBettor2 = bettor2 params `elem` txInfoSignatories info

  in
    outcomeMatches && (signedByBettor1 || signedByBettor2)

-- Compile the validator
{-# INLINABLE mkBettingValidator #-}
mkBettingValidator :: BetParams -> BuiltinByteString -> ScriptContext -> Bool
mkBettingValidator = validateBet

-- Define the wrap function 
{-# INLINABLE wrap #-}
wrap :: BuiltinData -> BuiltinData -> BuiltinData -> ()
wrap dat1 dat2 dat3 = 
  let
    params = unsafeFromBuiltinData dat1
    outcome = unsafeFromBuiltinData dat2
    ctx = unsafeFromBuiltinData dat3
  in
    if mkBettingValidator params outcome ctx then () else error ()

-- Boilerplate code to compile the validator
validator :: Validator
validator = mkValidatorScript $$(PlutusTx.compile [|| wrap ||])

writePlutusScript :: FilePath -> Validator -> IO ()
writePlutusScript file validator = do 
    createDirectoryIfMissing True (takeDirectory file)
    result <- writeFileTextEnvelope @(PlutusScript PlutusScriptV2) file Nothing $
        PlutusScriptSerialised . SBS.toShort . LBS.toStrict . serialise $ Plutus.V2.Ledger.Api.unValidatorScript 
        validator
    case result of 
        Left err -> print $ displayError err 
        Right () -> putStrLn "Successfully wrote Plutus script to file."

writeScript :: IO ()
writeScript = writePlutusScript "scripts5/bettingContract.plutus" validator
